package com.edworld.attendance_control_app.activities

import android.content.ContentValues
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Build
import android.os.Bundle
import android.os.Environment
import android.provider.MediaStore
import android.util.Base64
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.lifecycleScope
import com.edworld.attendance_control_app.data.models.*
import com.edworld.attendance_control_app.utils.PermissionManager
import io.ktor.client.call.*
import io.ktor.client.request.*
import io.ktor.http.*
import kotlinx.coroutines.launch
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

class GenerarQRActivity : ComponentActivity() {

    // Estados para la UI
    private var isLoading by mutableStateOf(false)
    private var isDownloading by mutableStateOf(false)
    private var qrGenerated by mutableStateOf<QRGeneratedResponse?>(null)
    private var errorMessage by mutableStateOf("")

    // Datos recibidos del Intent
    private var materiaId by mutableStateOf(0)
    private var materiaNombre by mutableStateOf("")
    private var materiaCodigo by mutableStateOf("")
    private var materiaGrupo by mutableStateOf("")
    private var horarioId by mutableStateOf(0)
    private var horarioDia by mutableStateOf("")
    private var horarioInicio by mutableStateOf("")
    private var horarioFin by mutableStateOf("")
    private var docenteId by mutableStateOf(0)

//    val url: String = "http://192.168.100.101:3000"
    //    val url:String="http://172.20.10.3:300"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Obtener datos del Intent
        materiaId = intent.getIntExtra("materia_id", 0)
        materiaNombre = intent.getStringExtra("materia_nombre") ?: ""
        materiaCodigo = intent.getStringExtra("materia_codigo") ?: ""
        materiaGrupo = intent.getStringExtra("materia_grupo") ?: ""
        horarioId = intent.getIntExtra("horario_id", 0)
        horarioDia = intent.getStringExtra("horario_dia") ?: ""
        horarioInicio = intent.getStringExtra("horario_inicio") ?: ""
        horarioFin = intent.getStringExtra("horario_fin") ?: ""
        docenteId = intent.getIntExtra("docente_id", 0)

        setContent {
            GenerarQRScreen(
                materiaNombre = materiaNombre,
                materiaCodigo = materiaCodigo,
                materiaGrupo = materiaGrupo,
                horarioDia = horarioDia,
                horarioInicio = horarioInicio,
                horarioFin = horarioFin,
                qrGenerated = qrGenerated,
                isLoading = isLoading,
                isDownloading = isDownloading,
                errorMessage = errorMessage,
                onNavigateBack = { finish() },
                onGenerarQR = { generarQR() },
                onDescargarQR = { descargarQR() }
            )
        }

        // Generar QR automáticamente al abrir la activity
        generarQR()
    }

    private fun generarQR() {
        isLoading = true
        errorMessage = ""
        qrGenerated = null

        lifecycleScope.launch {
            try {
                val request = GenerarQRRequest(
                    materia_id = materiaId,
                    horario_id = horarioId,
                    docente_id = docenteId
                )

                val response = ApiClient.client.post("${Constants.BASE_URL}/academic/materia/qr") {
                    contentType(ContentType.Application.Json)
                    setBody(request)
                }

                when (response.status) {
                    HttpStatusCode.OK -> {
                        val qrResponse: QRGeneratedResponse = response.body()
                        qrGenerated = qrResponse
                        isLoading = false
                        Toast.makeText(
                            this@GenerarQRActivity,
                            "QR generado exitosamente",
                            Toast.LENGTH_SHORT
                        ).show()
                    }

                    HttpStatusCode.BadRequest -> {
                        val errorResponse = response.body<Map<String, String>>()
                        errorMessage = errorResponse["error"] ?: "Error en la solicitud"
                        isLoading = false
                    }

                    HttpStatusCode.NotFound -> {
                        val errorResponse = response.body<Map<String, String>>()
                        errorMessage = errorResponse["error"] ?: "Horario no encontrado"
                        isLoading = false
                    }

                    HttpStatusCode.InternalServerError -> {
                        errorMessage = "Error interno del servidor"
                        isLoading = false
                    }

                    else -> {
                        errorMessage = "Error desconocido: ${response.status}"
                        isLoading = false
                    }
                }
            } catch (e: Exception) {
                errorMessage = "Error de conexión: ${e.localizedMessage}"
                isLoading = false
            }
        }
    }

    private fun descargarQR() {
        if (qrGenerated == null) {
            Toast.makeText(this, "No hay QR para descargar", Toast.LENGTH_SHORT).show()
            return
        }

        // Solo verificar permisos en Android 9 y anteriores
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
            if (!PermissionManager.hasStoragePermission(this)) {
                PermissionManager.requestStoragePermission(this)
                return
            }
        }

        isDownloading = true

        try {
            // Convertir base64 a bitmap
            val base64String = qrGenerated!!.qr.qr_image.substringAfter("base64,")
            val decodedBytes = Base64.decode(base64String, Base64.DEFAULT)
            val bitmap = BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.size)

            // Guardar imagen en la galería
            saveImageToGallery(bitmap)

        } catch (e: Exception) {
            Toast.makeText(
                this,
                "Error al procesar la imagen: ${e.localizedMessage}",
                Toast.LENGTH_LONG
            ).show()
            isDownloading = false
        }
    }

    private fun saveImageToGallery(bitmap: Bitmap) {
        try {
            val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
            val filename = "QR_${materiaCodigo}_${horarioDia}_$timestamp.png"

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                // Android 10+ (API 29+) - Usar MediaStore
                val contentValues = ContentValues().apply {
                    put(MediaStore.Images.Media.DISPLAY_NAME, filename)
                    put(MediaStore.Images.Media.MIME_TYPE, "image/png")
                    put(
                        MediaStore.Images.Media.RELATIVE_PATH,
                        Environment.DIRECTORY_PICTURES + "/QR_Asistencia"
                    )
                }

                val uri = contentResolver.insert(
                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                    contentValues
                )

                uri?.let {
                    contentResolver.openOutputStream(it)?.use { outputStream ->
                        bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
                    }

                    Toast.makeText(
                        this,
                        "QR guardado en la galería: $filename",
                        Toast.LENGTH_LONG
                    ).show()
                } ?: run {
                    Toast.makeText(this, "Error al crear el archivo", Toast.LENGTH_SHORT).show()
                }
            } else {
                // Android 9 y anteriores - Usar ruta directa
                val picturesDir =
                    Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)
                val qrDir = java.io.File(picturesDir, "QR_Asistencia")

                if (!qrDir.exists()) {
                    qrDir.mkdirs()
                }

                val imageFile = java.io.File(qrDir, filename)

                imageFile.outputStream().use { outputStream ->
                    bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
                }

                // Notificar al sistema que se agregó un archivo
                val contentValues = ContentValues().apply {
                    put(MediaStore.Images.Media.DATA, imageFile.absolutePath)
                    put(MediaStore.Images.Media.MIME_TYPE, "image/png")
                }
                contentResolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues)

                Toast.makeText(
                    this,
                    "QR guardado en: Pictures/QR_Asistencia/$filename",
                    Toast.LENGTH_LONG
                ).show()
            }

            isDownloading = false

        } catch (e: IOException) {
            Toast.makeText(
                this,
                "Error al guardar la imagen: ${e.localizedMessage}",
                Toast.LENGTH_LONG
            ).show()
            isDownloading = false
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        PermissionManager.handlePermissionResult(
            requestCode = requestCode,
            permissions = permissions,
            grantResults = grantResults,
            onStorageGranted = {
                Toast.makeText(this, "Permisos concedidos", Toast.LENGTH_SHORT).show()
                descargarQR() // Reintentar descarga
            },
            onStorageDenied = {
                Toast.makeText(
                    this,
                    "Se necesitan permisos de almacenamiento para descargar el QR",
                    Toast.LENGTH_LONG
                ).show()
            }
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GenerarQRScreen(
    materiaNombre: String = "",
    materiaCodigo: String = "",
    materiaGrupo: String = "",
    horarioDia: String = "",
    horarioInicio: String = "",
    horarioFin: String = "",
    qrGenerated: QRGeneratedResponse? = null,
    isLoading: Boolean = false,
    isDownloading: Boolean = false,
    errorMessage: String = "",
    onNavigateBack: () -> Unit = {},
    onGenerarQR: () -> Unit = {},
    onDescargarQR: () -> Unit = {}
) {
    val scrollState = rememberScrollState()

    Scaffold(
        topBar = {
            Column {
                TopAppBar(
                    title = {
                        Text(
                            text = "Código QR de Asistencia",
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold,
                            modifier = Modifier.fillMaxWidth(),
                            textAlign = TextAlign.Center,
                            color = Color.White
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = onNavigateBack) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Volver",
                                tint = Color.White
                            )
                        }
                    },
                    actions = {
                        if (qrGenerated != null) {
                            IconButton(onClick = onGenerarQR) {
                                Icon(
                                    imageVector = Icons.Default.Refresh,
                                    contentDescription = "Regenerar QR",
                                    tint = Color.White
                                )
                            }
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = Color(0xFF1E3A8A)
                    )
                )

                // Línea divisoria
                Divider(
                    thickness = 1.dp,
                    color = Color.White.copy(alpha = 0.3f)
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .verticalScroll(scrollState)
        ) {
            // Sección azul - Información de clase
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color(0xFF1E3A8A))
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                InformacionClase(
                    materiaNombre = materiaNombre,
                    materiaCodigo = materiaCodigo,
                    materiaGrupo = materiaGrupo,
                    horarioDia = horarioDia,
                    horarioInicio = horarioInicio,
                    horarioFin = horarioFin
                )
            }

            // Sección blanca - QR y controles
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(Color.White)
                    .padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                when {
                    isLoading -> {
                        // Estado de carga
                        QRLoadingSection()
                    }

                    errorMessage.isNotEmpty() -> {
                        // Estado de error
                        QRErrorSection(
                            errorMessage = errorMessage,
                            onRetry = onGenerarQR
                        )
                    }

                    qrGenerated != null -> {
                        // QR generado exitosamente
                        QRSuccessSection(
                            qrData = qrGenerated,
                            isDownloading = isDownloading,
                            onDescargar = onDescargarQR
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun InformacionClase(
    materiaNombre: String,
    materiaCodigo: String,
    materiaGrupo: String,
    horarioDia: String,
    horarioInicio: String,
    horarioFin: String
) {
    Column {
        Text(
            text = "Información de la clase:",
            color = Color.White,
            fontSize = 14.sp,
            fontWeight = FontWeight.Medium
        )

        Spacer(modifier = Modifier.height(8.dp))

        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White.copy(alpha = 0.1f))
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = materiaNombre,
                    color = Color.White,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )

                Spacer(modifier = Modifier.height(8.dp))

                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Column {
                        Text(
                            text = "Código: $materiaCodigo",
                            color = Color.White.copy(alpha = 0.8f),
                            fontSize = 12.sp
                        )
                        Text(
                            text = "Grupo: $materiaGrupo",
                            color = Color.White.copy(alpha = 0.8f),
                            fontSize = 12.sp
                        )
                    }
                    Column {
                        Text(
                            text = "Día: ${horarioDia.replaceFirstChar { it.uppercase() }}",
                            color = Color.White.copy(alpha = 0.8f),
                            fontSize = 12.sp
                        )
                        Text(
                            text = "Horario: $horarioInicio - $horarioFin",
                            color = Color.White.copy(alpha = 0.8f),
                            fontSize = 12.sp
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun QRLoadingSection() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFF8F9FA))
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .height(300.dp),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                CircularProgressIndicator(
                    color = Color(0xFF1E3A8A),
                    modifier = Modifier.size(48.dp)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "Generando código QR...",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    color = Color(0xFF1E3A8A)
                )
                Text(
                    text = "Por favor espera",
                    fontSize = 12.sp,
                    color = Color.Gray
                )
            }
        }
    }
}

@Composable
private fun QRErrorSection(
    errorMessage: String,
    onRetry: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFFFEBEE))
    ) {
        Column(
            modifier = Modifier.padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Icon(
                imageVector = Icons.Default.Error,
                contentDescription = "Error",
                tint = Color(0xFFDC2626),
                modifier = Modifier.size(48.dp)
            )
            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Error al generar QR",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFDC2626)
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = errorMessage,
                fontSize = 14.sp,
                color = Color(0xFFDC2626),
                textAlign = TextAlign.Center
            )
            Spacer(modifier = Modifier.height(16.dp))
            Button(
                onClick = onRetry,
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFFDC2626)
                )
            ) {
                Icon(
                    imageVector = Icons.Default.Refresh,
                    contentDescription = "Reintentar",
                    modifier = Modifier.size(16.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Reintentar")
            }
        }
    }
}

@Composable
private fun QRSuccessSection(
    qrData: QRGeneratedResponse,
    isDownloading: Boolean,
    onDescargar: () -> Unit
) {
    // Procesar imagen QR fuera del composable
    val qrBitmap = remember(qrData.qr.qr_image) {
        try {
            val base64String = qrData.qr.qr_image.substringAfter("base64,")
            val decodedBytes = Base64.decode(base64String, Base64.DEFAULT)
            BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.size)
        } catch (e: Exception) {
            null
        }
    }

    Column {
        // QR Code
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Código QR Generado",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1E3A8A)
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Mostrar imagen QR
                if (qrBitmap != null) {
                    Image(
                        bitmap = qrBitmap.asImageBitmap(),
                        contentDescription = "Código QR",
                        modifier = Modifier.size(250.dp)
                    )
                } else {
                    Box(
                        modifier = Modifier
                            .size(250.dp)
                            .background(Color.Gray.copy(alpha = 0.1f)),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "Error al cargar QR",
                            color = Color.Gray
                        )
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                // Información de expiración
                Text(
                    text = "Válido hasta:",
                    fontSize = 12.sp,
                    color = Color.Gray
                )
                Text(
                    text = formatearFechaExpiracion(qrData.qr.expires_at),
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Medium,
                    color = Color(0xFFDC2626)
                )
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Botón descargar
        Button(
            onClick = onDescargar,
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color(0xFF4CAF50)
            ),
            shape = RoundedCornerShape(12.dp),
            enabled = !isDownloading
        ) {
            if (isDownloading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(16.dp),
                    color = Color.White,
                    strokeWidth = 2.dp
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Descargando...")
            } else {
                Icon(
                    imageVector = Icons.Default.Download,
                    contentDescription = "Descargar"
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Descargar QR")
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // Información adicional
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(8.dp),
            colors = CardDefaults.cardColors(containerColor = Color(0xFFF0F8FF))
        ) {
            Column(
                modifier = Modifier.padding(12.dp)
            ) {
                Text(
                    text = "Instrucciones:",
                    fontSize = 14.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1E3A8A)
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = "• Muestra este QR a los estudiantes para registrar asistencia\n• El código expira automáticamente en 3 horas\n• Solo es válido para esta clase específica",
                    fontSize = 12.sp,
                    color = Color.Gray
                )
            }
        }
    }
}

// Función para formatear la fecha de expiración
private fun formatearFechaExpiracion(expiresAt: String): String {
    return try {
        val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
        val outputFormat = SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault())
        val date = inputFormat.parse(expiresAt)
        outputFormat.format(date ?: Date())
    } catch (e: Exception) {
        expiresAt
    }
}